// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var playerManagement = artifacts.require('PlayerManagement')


const truffleAssert = require('truffle-assertions');
const {
    BN,
    expectEvent,
    expectRevert,
} = require('@openzeppelin/test-helpers');
const { assertion } = require('@openzeppelin/test-helpers/src/expectRevert');
const { inTransaction } = require('@openzeppelin/test-helpers/src/expectEvent');

contract('PlayerManagement', async (accounts) => {
    // Declare few constants and assign a few sample accounts generated by ganache-cli


    const account_0 = accounts[0];
    const account_1 = accounts[1];
    const account_2 = accounts[2];
    const account_3 = accounts[3];

    const bet1 = [
        ["VER", "1"], ["PER", "2"], ["HAM", "3"], ["RUS", "4"], ["SAI", "5"],
        ["LEC", "6"], ["VET", "7"], ["STR", "8"], ["GAS", "9"], ["TSU", "10"],
        ["ALO", "11"],["OCO", "12"],["RIC", "13"],["NOR", "14"],["BOT", "15"],
        ["ZHO", "16"],["LAT", "17"],["ALB", "18"],["MSC", "19"],["MZP", "20"]
    ];

    const bet2 = [
        ["HAM", "1"], ["VET", "2"], ["VER", "3"], ["RUS", "4"], ["SAI", "5"],
        ["LEC", "6"], ["PER", "7"], ["STR", "8"], ["GAS", "9"], ["TSU", "10"],
        ["ALO", "11"],["OCO", "12"],["RIC", "13"],["NOR", "14"],["BOT", "15"],
        ["ZHO", "16"],["LAT", "17"],["ALB", "18"],["MSC", "19"],["MZP", "20"]
    ];



    // let f1bet = None;

    before("setup contract", async () => {
        f1bet = await playerManagement.new({ from: account_0 });
    });

    it("Register players", async () => {

        let temp = await f1bet.registerPlayer(account_1, "Lukas");
        expectEvent(temp, "PlayerRegistered", {addr: account_1, name: "Lukas"});

        let result1 = await f1bet.isPlayerRegistered(account_1);
        assert.equal(result1, true, "Player Lukas should be registered")
        let result2 = await f1bet.isPlayerRegistered(account_2);
        assert.equal(result2, false, "Player Patrick should not be registered")


        temp = await f1bet.registerPlayer(account_2, "Patrick");
        expectEvent(temp, "PlayerRegistered", {addr: account_2, name: "Patrick"});

        result1 = await f1bet.isPlayerRegistered(account_1);
        assert.equal(result1, true, "Player Lukas should be registered")
        result2 = await f1bet.isPlayerRegistered(account_2);
        assert.equal(result2, true, "Player Patrick should be registered")
    })

    it("Check player names are stored", async () => {
        let result1 = await f1bet.getPlayerInfo(account_1);
        assert.equal(result1[0], true);
        assert.equal(result1[1], "Lukas");

        let result2 = await f1bet.getPlayerInfo(account_2);
        assert.equal(result2[0], true);
        assert.equal(result2[1], "Patrick");

        let result3 = await f1bet.getPlayerInfo(account_3);
        assert.equal(result3[0], false);
        assert.equal(result3[1], "");
    })

    it("De-register players", async () => {
        let temp = await f1bet.deRegisterPlayer(account_1);
        expectEvent(temp, "PlayerDeRegistered", {addr: account_1});

        let result1 = await f1bet.getPlayerInfo(account_1);
        assert.equal(result1[0], false);
        assert.equal(result1[1], "");
        
        let result2 = await f1bet.getPlayerInfo(account_2);
        assert.equal(result2[0], true);
        assert.equal(result2[1], "Patrick");

        let result3 = await f1bet.getPlayerInfo(account_3);
        assert.equal(result3[0], false);
        assert.equal(result3[1], "");

    })



    // it("Owner can add player, but others can't", async () => {
    //     const f1bet = await F1Bet.new({ from: account_0 })
    //     await f1bet.addPlayer(account_0, "Lukas", { from: account_0 });

    //     expectRevert.unspecified(
    //         f1bet.addPlayer(account_1, "Lisa", { from: account_1 })
    //     );
    // })


    // it("Everyone can get a list of active players", async () => {
    //     f1bet = await F1Bet.new({ from: account_0 })

    //     await f1bet.addPlayer(account_0, "Lukas", { from: account_0 });
    //     await f1bet.addPlayer(account_1, "Lisa", { from: account_0 });

    //     let result = await f1bet.listPlayers();

    //     assert(result.length, 2, "Should have 2 players registered");
    //     assert.equal(result[0]['addr'], account_0, "Information read incorrectly.");
    //     assert.equal(result[0]['name'], "Lukas", "Information read incorrectly.");
    //     assert.equal(result[1]['addr'], account_1, "Information read incorrectly.");
    //     assert.equal(result[1]['name'], "Lisa", "Information read incorrectly.");

    // })

    // it("Player can be removed", async () => {
    //     await f1bet.removePlayer(account_0, "Lukas", { from: account_0 });
    //     // await f1bet.addPlayer(account_1, "Lisa", {from: account_0});

    //     let result = await f1bet.listPlayers();
    //     assert(result.length, 2, "Should have 1 players registered");
    //     assert.equal(result[0]['addr'], account_1, "Information read incorrectly.");
    //     assert.equal(result[0]['name'], "Lisa", "Information read incorrectly.");

    // })


});

